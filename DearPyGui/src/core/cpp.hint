// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984

#if !defined(mv_internal)
#define mv_internal static
#endif
#define mv_local_persist static
#define mv_global static
#define mv_python_function PyObject*
#ifndef mv_impl
#define mv_impl
#endif

#define MV_REGISTER_WIDGET(x, y, z, w) class x;\
template<> struct mvItemTypeMap<(int)mvAppItemType::x>\
{typedef x type;static constexpr const int flags = y;static constexpr const StorageValueTypes value_type = z;static constexpr const int target = w; static constexpr const char* const s_class = #x;};\
template<>struct mvItemTypeReverseMap<class x>{static constexpr mvAppItemType type = mvAppItemType::x;};

#define MV_APPLY_WIDGET_REGISTRATION(x, parser)\
static inline mvRef<mvAppItem> s_class_theme_component = nullptr;\
static constexpr const long s_internal_type = (long)x;\
static constexpr const char* const s_internal_id = #x;\
static constexpr const char* const s_command = #parser;\
mvAppItemType getType() const override { return x; }\
int getTarget() const override { return mvItemTypeMap<(int)x>::target; }\
int getDescFlags() const override { return mvItemTypeMap<(int)x>::flags; }\
StorageValueTypes getValueType() const override { return mvItemTypeMap<(int)x>::value_type; }\
mvRef<mvAppItem> getClassThemeComponent() const override { return s_class_theme_component; }\
const char* getCommand() const override { return #parser; }\
const char* getTypeString() const override { return #x; }\
const std::vector<std::pair<std::string, int>>& getAllowableParents() const override { return mvItemTypeMap<(int)x>::type::GetAllowableParents(); };\
const std::vector<std::pair<std::string, int>>& getAllowableChildren() const override { return mvItemTypeMap<(int)x>::type::GetAllowableChildren(); };\
static PyObject* parser(PyObject* self, PyObject* args, PyObject* kwargs)\
{\
	mvUUID id = 0;\
	mvRef<mvAppItem> item = nullptr;\
	auto [parent, before, alias] = GetNameFromArgs(id, args, kwargs);\
	if(id == 0) id = GenerateUUID();\
	item = GetItemFromPool((*GContext->itemRegistry), x);\
	if(item == nullptr) item = CreateRef<mvItemTypeMap<(int)x>::type>(id);\
	else item->_uuid;\
	if (!item->_alias.empty()) RemoveAlias(*GContext->itemRegistry, item->_alias, true);\
	item->_alias = alias;\
	if (!item->_alias.empty()) AddAlias(*GContext->itemRegistry, item->_alias, item->_uuid);\
	TryBoundTemplateRegistry((*GContext->itemRegistry), item.get());\
    VerifyArgumentCount(GetParsers()[#parser], args);\
	if(!GContext->IO.skipRequiredArgs)\
		item->handleSpecificRequiredArgs(args);\
	if(!GContext->IO.skipPositionalArgs)\
		item->handleSpecificPositionalArgs(args);\
	if(!GContext->IO.skipKeywordArgs)\
		item->handleKeywordArgs(kwargs, #parser);\
	AddItemWithRuntimeChecks((*GContext->itemRegistry), item, parent, before);\
    if(item->_alias.empty()) return ToPyLong((long)id);\
	return ToPyString(item->_alias);\
}\
static PyMethodDef GetMethodDefinition(){return { s_command, (PyCFunction)parser, METH_VARARGS | METH_KEYWORDS, GetParsers()[s_command].documentation.c_str() };\
}

///////////////////////////////////////////////////////////////////////////////
// states
///////////////////////////////////////////////////////////////////////////////

#define MV_SET_STATES(x) int getApplicableState() const override { return x; }

///////////////////////////////////////////////////////////////////////////////
// commands
///////////////////////////////////////////////////////////////////////////////

#define MV_NO_COMMANDS static void FillExtraCommands(std::vector<PyMethodDef>& methods){}
#define MV_CREATE_FREE_COMMAND(x) PyObject* x(PyObject* self, PyObject* args, PyObject* kwargs)
#define MV_CREATE_COMMAND(x) static PyObject* x(PyObject* self, PyObject* args, PyObject* kwargs)
#define MV_START_FREE_COMMANDS(x) static void x(std::vector<PyMethodDef>& methods){ 
#define MV_START_COMMANDS static void FillExtraCommands(std::vector<PyMethodDef>& methods){ 
#define MV_ADD_COMMAND(x) methods.push_back({ #x, (PyCFunction)x, METH_VARARGS | METH_KEYWORDS, GetParsers()[#x].documentation.c_str() });
#define MV_END_COMMANDS }

///////////////////////////////////////////////////////////////////////////////
// constants
///////////////////////////////////////////////////////////////////////////////

#define MV_NO_CONSTANTS public: static const std::vector<std::pair<std::string, long>>& GetGeneralConstants()\
{static std::vector<std::pair<std::string, long>> constants ={\
};return constants;}

#define MV_START_CONSTANTS public: static const std::vector<std::pair<std::string, long>>& GetGeneralConstants()\
{static std::vector<std::pair<std::string, long>> constants ={

#define MV_END_CONSTANTS };return constants;}
#define MV_ADD_CONSTANT(x) {#x, x}
#define MV_CREATE_CONSTANT(y, z) static constexpr const long y = z;

///////////////////////////////////////////////////////////////////////////////
// parents
///////////////////////////////////////////////////////////////////////////////

#define MV_DEFAULT_PARENTS static const std::vector<std::pair<std::string, int>>& GetAllowableParents()\
{static std::vector<std::pair<std::string, int>> constants = {{"All", 0}}; return constants;}

#define MV_START_PARENTS static const std::vector<std::pair<std::string, int>>& GetAllowableParents()\
{static std::vector<std::pair<std::string, int>> constants = {

#define MV_ADD_PARENT(x){#x, (int)x}
#define MV_END_PARENTS };return constants;}

///////////////////////////////////////////////////////////////////////////////
// children
///////////////////////////////////////////////////////////////////////////////

#define MV_DEFAULT_CHILDREN static const std::vector<std::pair<std::string, int>>& GetAllowableChildren()\
{static std::vector<std::pair<std::string, int>> constants = {{"All", 0}}; return constants;}

#define MV_START_CHILDREN static const std::vector<std::pair<std::string, int>>& GetAllowableChildren()\
{static std::vector<std::pair<std::string, int>> constants = {

#define MV_ADD_CHILD(x){#x, (int)x}
#define MV_END_CHILDREN };return constants;}
